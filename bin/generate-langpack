#!/bin/bash

set -e

function die() {
  echo $1
  exit 1
}

LANGPACK=$1

test -n "$LANGPACK" || die "Usage: $0 <LangPack>"
test -d $LANGPACK && die "LangPack $LANGPACK already exists."

for d in template/bin examples; do
  mkdir -p $LANGPACK/$d
done

# Create stubs for executable bin files
for x in setup pipe build; do
  cat <<EOF > $LANGPACK/template/bin/$x
#!/bin/bash

# This executable does not need to be a bash script
# It merely needs to follow the spec for bin/$x

# If you want this file to be a binary executable
# Include source and instructions for building this file
# and add bin/$x to .gitignore

echo "$x not yet implemented"
exit 1
EOF

  chmod +x $LANGPACK/template/bin/$x
done


cat <<EOF > $LANGPACK/README.md
# ${LANGPACK^} LangPack

This LangPack provide support for building and running ${LANGPACK^} algorithms on the Algorithmia platform.

## Building an algorithm
```
docker run --rm -it -v `pwd`:/tmp/build algorithmia/langbuilder-$LANGPACK
```

## Running an algorithm:
```
docker run --rm -it -v /path/to/algorithm.zip:/tmp/algorithm.zip -p 9999:9999 algorithmia/langserver-$LANGPACK
```

## Calling an algorithm
```
curl -s localhost:9999 -X POST -H 'Content-Type: text/plain' -d '<INPUT>'
```
EOF


cat <<EOF > $LANGPACK/template/README.md
# __ALGO__

This repo is hosted as a service on Algorithmia as [__USER__/__ALGO__](https://algorithmia.com/algorithms/__USER__/__ALGO__)

# Testing locally

The project can be built with:

```
bin/build
```

The algorithm can be tested via the `bin/pipe` executable, or by managing `bin/pipe` with Langserver.

To use `bin/pipe` directly, simply pipe data into it:

```
echo '{"content_type":"text", "data":"foo"}` | bin/pipe
```

To use langserver, start langserver from the root of this repo, and cURL it:

```
curl -X POST localhost:9999 -H 'Content-Type: text/plain' -d 'foo'
```
EOF
